type AlternativeTitle {
  iso3166_1: String!
  title: String!
  type: String!
}

union AnyImage =
    BackdropSizeDetailImage
  | PosterSizeDetailImage
  | ProfileSizeDetailImage
  | StillSizeDetailImage
  | LogoSizeDetailImage

enum BackdropSize {
  Original
  W780
  W1280
  W300
}

type BackdropSizeDetailImage {
  aspectRatio: Float!
  height: Int!
  image(size: BackdropSize!): URL!
  iso639_1: String
  voteAverage: Float!
  voteCount: Int!
  width: Int!
}

type CastCreditWithMovie implements ICreditWithMovie {
  character: String!
  id: String!
  value: Movie!
}

type CastCreditWithMovieOrTV implements ICreditWithMovieOrTV {
  character: String!
  id: String!
  value: MovieOrTV!
}

type CastCreditWithPerson implements ICreditWithPerson {
  character: String!
  id: String!
  value: Person!
}

type CastCreditWithTVShow implements ICreditWithTVShow {
  character: String!
  id: String!
  value: TVShow!
}

type CreditWithMovie implements ICreditWithMovie {
  id: String!
  value: Movie!
}

type CreditWithMovieOrTV implements ICreditWithMovieOrTV {
  id: String!
  value: MovieOrTV!
}

type CreditWithPerson implements ICreditWithPerson {
  id: String!
  value: Person!
}

type CreditWithTVShow implements ICreditWithTVShow {
  id: String!
  value: TVShow!
}

type CreditsWithMovie {
  cast: [CastCreditWithMovie!]!
  crew: [CrewCreditWithMovie!]!
  id: Int!
}

type CreditsWithMovieOrTV {
  cast: [CastCreditWithMovieOrTV!]!
  crew: [CrewCreditWithMovieOrTV!]!
  id: Int!
}

type CreditsWithPerson implements ICreditsWithPerson {
  cast: [CastCreditWithPerson!]!
  crew: [CrewCreditWithPerson!]!
  id: Int!
}

type CreditsWithTVShow {
  cast: [CastCreditWithTVShow!]!
  crew: [CrewCreditWithTVShow!]!
  id: Int!
}

type CrewCreditWithMovie implements ICreditWithMovie {
  department: String!
  id: String!
  job: String!
  value: Movie!
}

type CrewCreditWithMovieOrTV implements ICreditWithMovieOrTV {
  department: String!
  id: String!
  job: String!
  value: MovieOrTV!
}

type CrewCreditWithPerson implements ICreditWithPerson {
  department: String!
  id: String!
  job: String!
  value: Person!
}

type CrewCreditWithTVShow implements ICreditWithTVShow {
  department: String!
  id: String!
  job: String!
  value: TVShow!
}

scalar Date

type Episode implements Node {
  airDate: Date
  credits: EpisodeCreditsWithPerson!
  crew: [CrewCreditWithPerson!]!
  episodeNumber: Int!
  externalIds: ExternalIDS!
  guestStars: [CastCreditWithPerson!]!

  # The id of the object
  id: ID!
  images: EpisodeImages!
  name: String!
  overview: String!
  productionCode: String!
  season: Season!
  seasonNumber: Int!
  show: TVShow!
  still(size: StillSize!): URL
  streamingOptions: [StreamingOption!]
  translations: [TranslationWithTranslatedMovieInfo!]!
  videos: [Video!]!
  voteAverage: Float!
  voteCount: Int!
}

type EpisodeCreditsWithPerson implements ICreditsWithPerson {
  cast: [CastCreditWithPerson!]!
  crew: [CrewCreditWithPerson!]!
  guestStars: [CastCreditWithPerson!]!
  id: Int!
}

type EpisodeImages {
  stills: [StillSizeDetailImage!]!
}

type ExternalIDS {
  facebook: String
  imdb: String
  instagram: String
  twitter: String
}

enum ExternalSource {
  Tvdb
  Facebook
  Tvrage
  Instagram
  Twitter
  Imdb
  Freebase
}

type FromExternalIds {
  movies: [Movie!]!
  people: [Person!]!
  tv: [TVShow!]!
}

enum Gender {
  Male
  Female
  UnknownOrNonBinary
}

type Genre {
  id: Int!
  name: String!
}

interface ICreditWithMovie {
  id: String!
  value: Movie!
}

interface ICreditWithMovieOrTV {
  id: String!
  value: MovieOrTV!
}

interface ICreditWithPerson {
  id: String!
  value: Person!
}

interface ICreditWithTVShow {
  id: String!
  value: TVShow!
}

interface ICreditsWithPerson {
  cast: [CastCreditWithPerson!]!
  crew: [CrewCreditWithPerson!]!
  id: Int!
}

type Keyword {
  id: Int!
  movies(after: String, last: Int, first: Int, before: String): MovieConnection!
  name: String!
}

enum LogoSize {
  W92
  W185
  W154
  Original
  W45
  W500
  W300
}

type LogoSizeDetailImage {
  aspectRatio: Float!
  height: Int!
  image(size: LogoSize!): URL!
  iso639_1: String
  voteAverage: Float!
  voteCount: Int!
  width: Int!
}

type MediaImages {
  backdrops: [BackdropSizeDetailImage!]!
  posters: [PosterSizeDetailImage!]!
}

type Movie implements Node {
  alternativeTitles: [AlternativeTitle!]!
  backdrop(size: BackdropSize!): URL
  budget: Int
  credits: ICreditsWithPerson!
  externalIds: ExternalIDS!
  genres: [Genre!]!
  homepage: URL

  # The id of the object
  id: ID!
  images: MediaImages!
  imdbID: String!
  isAdult: Boolean!
  isVideo: Boolean!
  keywords: [Keyword!]!
  numberOfRatings: Int!
  originalLanguage: String!
  originalTitle: String!
  overview: String!
  popularityIndex: Float
  poster(size: PosterSize!): URL
  productionCompanies: [ProductionCompany!]!
  productionCountries: [ProductionCountry!]!
  rating: Float!
  recommendations(
    first: Int
    before: String
    after: String
    last: Int
  ): MovieConnection!
  releaseDate: Date
  revenue: Int
  reviews(
    last: Int
    first: Int
    before: String
    after: String
  ): ReviewConnection!
  runtime: Int!
  similar(
    first: Int
    before: String
    after: String
    last: Int
  ): MovieConnection!
  spokenLanguages: [SpokenLanguage!]!
  status: Status!
  streamingOptions: [StreamingOption!]
  tagline: String!
  title: String!
  translations: [TranslationWithTranslatedMovieInfo!]!
  videos: [Video!]!
}

type MovieConnection {
  edges: [MovieEdge]
  pageInfo: PageInfo!
  totalCount: Int!
}

type MovieEdge {
  cursor: String!
  node: Movie
}

union MovieOrTV = Movie | TVShow

union MovieOrTVOrPeople = Movie | TVShow | Person

type MovieOrTVOrPeopleConnection {
  edges: [MovieOrTVOrPeopleEdge]
  pageInfo: PageInfo!
  totalCount: Int!
}

type MovieOrTVOrPeopleEdge {
  cursor: String!
  node: MovieOrTVOrPeople
}

type Movies {
  movie(id: ID!): Movie!
  nowPlaying(
    first: Int
    after: String
    before: String
    last: Int
  ): MovieConnection!
  popular(
    first: Int
    last: Int
    after: String
    before: String
  ): MovieConnection!
  search(
    first: Int
    last: Int
    after: String
    before: String
    term: String!
  ): MovieConnection!
  topRated(
    first: Int
    last: Int
    after: String
    before: String
  ): MovieConnection!
  trending(
    timeWindow: TimeWindow! = Day
    after: String
    last: Int
    first: Int
    before: String
  ): MovieConnection!
  upcoming(
    first: Int
    last: Int
    after: String
    before: String
  ): MovieConnection!
}

type Network {
  id: Int!
  logo(size: LogoSize!): URL
  name: String!
  originCountry: String!
}

interface Node {
  # The id of the object
  id: ID!
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type People {
  person(id: ID!): Person!
  popular(
    last: Int
    first: Int
    after: String
    before: String
  ): PersonConnection!
  search(
    after: String
    term: String!
    first: Int
    last: Int
    before: String
  ): PersonConnection!
  trending(
    first: Int
    last: Int
    timeWindow: TimeWindow! = Day
    after: String
    before: String
  ): PersonConnection!
}

type Person implements Node {
  alsoKnownAs: [String!]!
  biography: String!
  birthday: Date
  credits: PersonCredits!
  deathday: Date
  externalIds: ExternalIDS!
  gender: Gender!
  homepage: URL

  # The id of the object
  id: ID!
  images: [ProfileSizeDetailImage!]!
  imdbID: String
  isAdult: Boolean!
  knownFor: [MovieOrTV!]!
  knownForDepartment: String!
  name: String!
  placeOfBirth: String
  popularityIndex: Float!
  profilePicture(size: ProfileSize!): URL
  taggedImages(
    before: String
    first: Int
    after: String
    last: Int
  ): TaggedImageConnection!
  translations: [TranslationWithTranslatedPersonInfo!]!
}

type PersonConnection {
  edges: [PersonEdge]
  pageInfo: PageInfo!
  totalCount: Int!
}

type PersonCredits {
  all: CreditsWithMovieOrTV!
  movies: CreditsWithMovie!
  tv: CreditsWithTVShow!
}

type PersonEdge {
  cursor: String!
  node: Person
}

enum PosterSize {
  W780
  W185
  W154
  W92
  Original
  W500
  W342
}

type PosterSizeDetailImage {
  aspectRatio: Float!
  height: Int!
  image(size: PosterSize!): URL!
  iso639_1: String
  voteAverage: Float!
  voteCount: Int!
  width: Int!
}

type Price {
  amount: Float!
  currency: String!
}

type ProductionCompany {
  id: Int!
  logo(size: LogoSize!): URL
  name: String!
  originCountry: String!
}

type ProductionCountry {
  iso3166_1: String!
  name: String!
}

enum ProfileSize {
  W185
  H632
  Original
  W45
}

type ProfileSizeDetailImage {
  aspectRatio: Float!
  height: Int!
  image(size: ProfileSize!): URL!
  iso639_1: String
  voteAverage: Float!
  voteCount: Int!
  width: Int!
}

type Query {
  find(externalId: String!, source: ExternalSource!): FromExternalIds!
  movies: Movies!

  # Fetches an object given its ID
  node(
    # The ID of an object
    id: ID!
  ): Node
  people: People!
  search(
    last: Int
    before: String
    term: String!
    first: Int
    after: String
  ): MovieOrTVOrPeopleConnection!
  trending(
    before: String
    after: String
    last: Int
    timeWindow: TimeWindow! = Day
    first: Int
  ): MovieOrTVOrPeopleConnection!
  tv: TV!
}

type Review {
  author: String!
  content: String!
  id: String!
  url: String!
}

type ReviewConnection {
  edges: [ReviewEdge]
  pageInfo: PageInfo!
  totalCount: Int!
}

type ReviewEdge {
  cursor: String!
  node: Review
}

type Season implements Node {
  airDate: Date
  credits: ICreditsWithPerson!
  episode(number: Int!): Episode!
  episodeCount: Int!
  episodes: [Episode!]!
  externalIds: ExternalIDS!

  # The id of the object
  id: ID!
  images: MediaImages!
  name: String!
  overview: String
  poster(size: PosterSize!): URL
  seasonNumber: Int!
  show: TVShow!
  streamingOptions: [StreamingOption!]
  videos: [Video!]!
}

type SpokenLanguage {
  iso639_1: String!
  name: String!
}

enum Status {
  Cancelled
  Rumored
  Released
  InProduction
  Planned
  PostProduction
}

enum StillSize {
  W185
  W92
  Original
  W300
}

type StillSizeDetailImage {
  aspectRatio: Float!
  height: Int!
  image(size: StillSize!): URL!
  iso639_1: String
  voteAverage: Float!
  voteCount: Int!
  width: Int!
}

type StreamingLinks {
  androidTV: URL
  fireTV: URL
  tvOS: URL
  web: URL
}

enum StreamingMonetizationType {
  Rent
  Cinema
  Buy
  Flatrate
  Ads
  Free
}

type StreamingOption {
  bestOffering: StreamingOptionOffering!
  offerings: [StreamingOptionOffering!]!
  provider: StreamingProvider
}

type StreamingOptionOffering {
  links: StreamingLinks!
  price: Price
  resolution: VideoResolution!
  type: StreamingMonetizationType!
}

type StreamingProvider {
  iconURL: URL!
  id: Int!
  monetizationTypes: [StreamingMonetizationType!]!
  name: String!
  slug: String!
}

type TV {
  airingToday(
    before: String
    after: String
    first: Int
    last: Int
  ): TVShowConnection!
  episode(id: ID!): Episode!
  onTheAir(
    first: Int
    after: String
    last: Int
    before: String
  ): TVShowConnection!
  popular(
    first: Int
    after: String
    last: Int
    before: String
  ): TVShowConnection!
  search(
    after: String
    last: Int
    term: String!
    first: Int
    before: String
  ): TVShowConnection!
  season(id: ID!): Season!
  show(id: ID!): TVShow!
  topRated(
    last: Int
    before: String
    first: Int
    after: String
  ): TVShowConnection!
  trending(
    first: Int
    after: String
    before: String
    timeWindow: TimeWindow! = Day
    last: Int
  ): TVShowConnection!
  upcoming(
    before: String
    after: String
    first: Int
    last: Int
  ): TVShowConnection!
}

type TVShow implements Node {
  alternativeTitles: [AlternativeTitle!]!
  backdrop(size: BackdropSize!): URL
  createdBy: [ICreditWithPerson!]!
  credits: ICreditsWithPerson!
  episodeRunTime: [Int!]!
  episodes: [Episode!]!
  externalIds: ExternalIDS!
  firstAirDate: Date
  genres: [Genre!]!
  homepage: URL

  # The id of the object
  id: ID!
  images: MediaImages!
  inProduction: Boolean!
  keywords: [Keyword!]!
  languages: [String!]!
  lastAirDate: Date
  lastEpisodeToAir: Episode
  name: String!
  networks: [Network!]!
  nextEpisodeToAir: Episode
  numberOfEpisodes: Int!
  numberOfRatings: Int!
  numberOfSeasons: Int!
  originCountry: [String!]!
  originalLanguage: String!
  originalName: String!
  overview: String!
  popularityIndex: Float
  poster(size: PosterSize!): URL
  productionCompanies: [Network!]!
  rating: Float!
  recommendations(
    last: Int
    before: String
    first: Int
    after: String
  ): TVShowConnection!
  reviews(
    after: String
    first: Int
    last: Int
    before: String
  ): ReviewConnection!
  season(number: Int!): Season!
  seasons: [Season!]!
  similar(
    before: String
    first: Int
    after: String
    last: Int
  ): TVShowConnection!
  status: String!
  streamingOptions: [StreamingOption!]
  topRatedEpisode: Episode
  translations: [TranslationWithTranslatedMovieInfo!]!
  type: String!
  videos: [Video!]!
}

type TVShowConnection {
  edges: [TVShowEdge]
  pageInfo: PageInfo!
  totalCount: Int!
}

type TVShowEdge {
  cursor: String!
  node: TVShow
}

type TaggedImage {
  image: AnyImage!
  media: MovieOrTV!
}

type TaggedImageConnection {
  edges: [TaggedImageEdge]
  pageInfo: PageInfo!
  totalCount: Int!
}

type TaggedImageEdge {
  cursor: String!
  node: TaggedImage
}

enum TimeWindow {
  Day
  Week
}

type TranslatedMovieInfo {
  overview: String!
  title: String!
}

type TranslatedPersonInfo {
  biography: String!
}

type TranslationWithTranslatedMovieInfo {
  info: TranslatedMovieInfo!
  iso3166_1: String!
  iso639_1: String!
  language: String
  localizedLanguage: String
}

type TranslationWithTranslatedPersonInfo {
  info: TranslatedPersonInfo!
  iso3166_1: String!
  iso639_1: String!
  language: String
  localizedLanguage: String
}

scalar URL

type Video {
  id: String!
  iso3166_1: String!
  iso639_1: String!
  key: String!
  links: StreamingLinks
  name: String!
  site: String!
  size: Int!
  thumbnail: URL
  type: String!
}

enum VideoResolution {
  UltraHd
  Sd
  Dvd
  Bluray
  Hd
  Theatre
}
