{
	"Fragment Hook": {
		"prefix": "frghk",
		"body": [
			"import type { ${TM_FILENAME_BASE}_${2:$1}\\$key } from './__generated__/${TM_FILENAME_BASE}_$2.graphql';",
			"",
			"import { useFragment } from 'react-relay';",
			"import { graphql } from 'babel-plugin-relay/macro';",
			"",
			"function ${TM_FILENAME_BASE}($2: ${TM_FILENAME_BASE}_$2\\$key) {",
			"    const decoded = useFragment(",
			"        graphql`",
			"            fragment ${TM_FILENAME_BASE}_$2 on $1 {",
			"                $0",
			"            }",
			"        `,",
			"        $2",
			"    );",
			"",
			"}",
			"",
			"export default ${TM_FILENAME_BASE};"
		],
		"description": "Creates a React Component with a Fragment"
	},
	"Fragment Component": {
		"prefix": "frg",
		"body": [
			"import type { ${TM_FILENAME_BASE}_${2:$1}\\$key } from './__generated__/${TM_FILENAME_BASE}_$2.graphql';",
			"",
			"import React from 'react';",
			"",
			"import { useFragment } from 'react-relay';",
			"import { graphql } from 'babel-plugin-relay/macro';",
			"",
			"type Props = {",
			"    $2: ${TM_FILENAME_BASE}_$2\\$key,",
			"}",
			"",
			"function ${TM_FILENAME_BASE}(props: Props) {",
			"    const $2 = useFragment(",
			"        graphql`",
			"            fragment ${TM_FILENAME_BASE}_$2 on $1 {",
			"                $0",
			"            }",
			"        `,",
			"        props.$2",
			"    );",
			"",
			"    return (",
			"        <p>Hello World</p>",
			"    );",
			"}",
			"",
			"export default ${TM_FILENAME_BASE};"
		],
		"description": "Creates a React Component with a Fragment"
	},
	"Query Component": {
		"prefix": "query",
		"body": [
			"import type { ${TM_FILENAME_BASE}Query as ${TM_FILENAME_BASE}QueryType } from './__generated__/${TM_FILENAME_BASE}Query.graphql';",
			"import type { ErrorBoundary } from 'react-error-boundary';",
			"",
			"import ${TM_FILENAME_BASE}Query from './__generated__/${TM_FILENAME_BASE}Query.graphql';",
			"",
			"import React, { useEffect, useRef } from 'react';",
			"",
			"import { PreloadedQuery, usePreloadedQuery, useQueryLoader } from 'react-relay';",
			"import { graphql } from 'babel-plugin-relay/macro';",
			"",
			"import LoadingSuspense from 'LoadingSuspense';",
			"",
			"type LoadedProps = {",
			"    ${1:data}: PreloadedQuery<${TM_FILENAME_BASE}QueryType>",
			"}",
			"",
			"type Props = {",
			"    ",
			"}",
			"",
			"function ${TM_FILENAME_BASE}(props: LoadedProps) {",
			"    const $1 = usePreloadedQuery(",
			"        graphql`",
			"            query ${TM_FILENAME_BASE}Query {",
			"                $0",
			"            }",
			"        `,",
			"        props.$1",
			"    );",
			"",
			"    return (",
			"        <p>Hello World</p>",
			"    );",
			"}",
			"",
			"function ${TM_FILENAME_BASE}Wrapper(props: Props) {",
			"    const [",
			"        $1,",
			"        loadQuery,",
			"        dispose,",
			"    ] = useQueryLoader<${TM_FILENAME_BASE}QueryType>(${TM_FILENAME_BASE}Query);",
			"",
			"    const error = useRef<ErrorBoundary>(null);",
			"    useEffect(() => {",
			"        error.current?.reset();",
			"        loadQuery({ });",
			"        return () => {",
			"            dispose();",
			"        };",
			"    }, [dispose, loadQuery]);",
			"",
			"    return (",
			"        <LoadingSuspense boundaryRef={error}>",
			"            {$1 != null && <${TM_FILENAME_BASE} $1={$1}/>}",
			"        </LoadingSuspense>",
			"    );",
			"}",
			"",
			"export default ${TM_FILENAME_BASE}Wrapper;"
		],
		"description": "Creates a React Component with a Fragment"
	},
	"Component": {
		"prefix": "comp",
		"body": [
			"type Props = {",
			"    $1",
			"}",
			"",
			"function ${TM_FILENAME_BASE}(props: Props) {",
			"    return (",
			"        $0",
			"    );",
			"}",
			"",
			"export default ${TM_FILENAME_BASE};"
		],
		"description": "Creates a Component"
	},
	"Pagination Fragment Component": {
		"prefix": "paging",
		"body": [
			"import type { ${TM_FILENAME_BASE}_${2:$1}\\$key } from './__generated__/${TM_FILENAME_BASE}_$2.graphql';",
			"import type { ${TM_FILENAME_BASE}PaginationQuery } from './__generated__/${TM_FILENAME_BASE}PaginationQuery.graphql';",
			"",
			"import React from 'react';",
			"",
			"import { usePaginationFragment } from 'react-relay';",
			"import { graphql } from 'babel-plugin-relay/macro';",
			"",
			"import InfiniteScrollview from 'InfiniteScrollview';",
			"import $4 from '$4';",
			"",
			"type Props = {",
			"    $2: ${TM_FILENAME_BASE}_$2\\$key,",
			"}",
			"",
			"function ${TM_FILENAME_BASE}(props: Props) {",
			"    const { ",
			"        data,",
			"        ...connection",
			"    // eslint-disable-next-line relay/generated-flow-types",
			"    } = usePaginationFragment<${TM_FILENAME_BASE}PaginationQuery, ${TM_FILENAME_BASE}_${2:$1}\\$key>(",
			"        graphql`",
			"            fragment ${TM_FILENAME_BASE}_$2 on $1",
			"            @argumentDefinitions(",
			"                count: { type: \"Int!\", defaultValue: 20 }",
			"                cursor: { type: \"String\" }",
			"            )",
			"            @refetchable(queryName: \"${TM_FILENAME_BASE}PaginationQuery\") {",
			"                $3(first: \\$count, after: \\$cursor) @connection(key: \"${TM_FILENAME_BASE}_$2_$3\") {",
			"                    edges {",
			"                        node {",
			"                            ...$4_$5",
			"                        }",
			"                    }",
			"                }",
			"            }",
			"        `,",
			"        props.$2",
			"    );",
			"",
			"    const nodes = data.$3.edges?.mapNotNull(edge => edge?.node) ?? []",
			"",
			"    return (",
			"        <InfiniteScrollview {...connection}>",
			"            {nodes.map(($5, index) => <$4 key={`$3_$4_\\${index}`} $5={$5}/>)}",
			"        </InfiniteScrollview>",
			"    );",
			"}",
			"",
			"export default ${TM_FILENAME_BASE};"
		]
	}
}